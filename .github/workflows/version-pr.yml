# .github/workflows/version-pr.yml
name: Version PR

on:
  push:
    branches:
      - main
    paths:
      - ".changeset/**"

jobs:
  get-version:
    name: Get next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changeset.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get next version number
        id: changeset
        run: |
          # Führe 'snapshot' aus, um die package.json temporär zu aktualisieren
          pnpm changeset version --snapshot

          # Lese die neue Version direkt aus der nun geänderten package.json
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Setze alle Dateiänderungen zurück, damit der nächste Job sauber startet
          git restore .

  create-pr:
    name: Create Version PR
    needs: get-version
    # Starte nur, wenn eine Version gefunden wurde
    if: needs.get-version.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Changeset PR or update existing one
        uses: changesets/action@v1
        with:
          version: pnpm changeset version
          title: "Upcoming Release v${{ needs.get-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
